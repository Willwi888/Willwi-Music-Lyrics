const Busboy = require("busboy");
const fs = require("fs");
const os = require("os");
const path = require("path");
const ffmpeg = require("fluent-ffmpeg");
const ffmpegPath = require("ffmpeg-static");

ffmpeg.setFfmpegPath(ffmpegPath);
export const config = { api: { bodyParser: false } };

export default async function handler(req, res) {
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).end("Method Not Allowed");
  }
  const tmp = os.tmpdir();
  const inPath  = path.join(tmp, `in-${Date.now()}.webm`);
  const outPath = path.join(tmp, `out-${Date.now()}.mp4`);
  try {
    await new Promise((resolve, reject) => {
      const bb = Busboy({ headers: req.headers, limits: { fileSize: 80 * 1024 * 1024 } });
      let saved = false;
      bb.on("file", (_name, file) => {
        const ws = fs.createWriteStream(inPath);
        file.pipe(ws);
        ws.on("finish", () => { saved = true; });
        ws.on("error", reject);
      });
      bb.on("finish", () => saved ? resolve() : reject(new Error("no file")));
      bb.on("error", reject);
      req.pipe(bb);
    });
    await new Promise((resolve, reject) => {
      ffmpeg(inPath)
        .videoCodec("libx264")
        .audioCodec("aac")
        .outputOptions(["-pix_fmt yuv420p", "-preset veryfast", "-b:a 192k"])
        .on("end", resolve).on("error", reject)
        .save(outPath);
    });
    res.setHeader("Content-Type", "video/mp4");
    res.setHeader("Content-Disposition", 'attachment; filename="willwi-lyrics.mp4"');
    fs.createReadStream(outPath)
      .on("close", () => { fs.unlink(inPath, ()=>{}); fs.unlink(outPath, ()=>{}); })
      .pipe(res);
  } catch (e) {
    fs.unlink(inPath, ()=>{}); fs.unlink(outPath, ()=>{});
    console.error(e);
    return res.status(500).send("convert failed");
  }
}
